{
	"info": {
		"_postman_id": "ddb6d988-a3e5-4c26-9eee-a24e56ab804f",
		"name": "Symfony Blog",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20483898"
	},
	"item": [
		{
			"name": "Login valid credentials",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"token\");\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "yanaef",
							"type": "text"
						},
						{
							"key": "password",
							"value": "dcc1c8b020",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login invalid username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "123456789",
							"type": "text"
						},
						{
							"key": "password",
							"value": "dcc1c8b020",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login invalid password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Invalid credentials\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "username",
							"value": "yanaef",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456789",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "https://test-stand.gb.ru/gateway/login",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"gateway",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "OwnerNotMe ASC page 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"order ASC\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.lessThan(jsonData.data[2].id);\r",
							"});\r",
							"\r",
							"pm.test(\"sorting\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Date.parse(jsonData.data[1].createdAt)).to.be.lessThan(Date.parse(jsonData.data[2].createdAt));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OwnerNotMe ASC page 10",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(11);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(9);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"order ASC\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.lessThan(jsonData.data[2].id);\r",
							"});\r",
							"\r",
							"pm.test(\"sorting\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Date.parse(jsonData.data[1].createdAt)).to.be.lessThan(Date.parse(jsonData.data[2].createdAt));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ASC&page=10",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OwnerNotMe DESC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4);\r",
							"});\r",
							"\r",
							"pm.test(\"order DESC\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.greaterThan(jsonData.data[2].id);\r",
							"});\r",
							"\r",
							"pm.test(\"sorting\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Date.parse(jsonData.data[1].createdAt)).to.be.greaterThan(Date.parse(jsonData.data[2].createdAt));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=DESC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "DESC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OwnerNotMe ALL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(4);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&sort=createdAt&order=ALL&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ALL"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "OwnerNotMe contains data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"description\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"authorId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"mainImage\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"labels\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"delayPublishTo\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"draft\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?owner=notMe&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "owner",
							"value": "notMe"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts ASC page 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.count).to.eql(11);\r",
							"});\r",
							"\r",
							"pm.test(\"order ASC\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.lessThan(jsonData.data[2].id);\r",
							"});\r",
							"\r",
							"pm.test(\"sorting\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Date.parse(jsonData.data[1].createdAt)).to.be.lessThan(Date.parse(jsonData.data[2].createdAt));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts ASC page 10 empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data).to.be.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=10",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts DESC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Next page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.nextPage).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Prev Page\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.prevPage).to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"DataLength\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.length).to.eql(10);\r",
							"});\r",
							"\r",
							"pm.test(\"order DESC\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data[1].id).to.be.greaterThan(jsonData.data[2].id);\r",
							"});\r",
							"\r",
							"pm.test(\"count\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.meta.count).to.eql(11);\r",
							"});\r",
							"\r",
							"pm.test(\"sorting\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(Date.parse(jsonData.data[1].createdAt)).to.be.greaterThan(Date.parse(jsonData.data[2].createdAt));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=DESC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "DESC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts contains data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"title\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"description\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"content\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"authorId\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"mainImage\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"updatedAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"createdAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"labels\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"delayPublishTo\");\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"draft\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts wrong page value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=ASC&page=PAGEONE",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "PAGEONE"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts wrong order value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=createdAt&order=1&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "createdAt"
						},
						{
							"key": "order",
							"value": "1"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MyPosts wrong sort value",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {\r",
							"    pm.response.to.have.status(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Auth-Token",
						"value": "5348e25f39d94f1ef8bb0c00d14c8566",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://test-stand.gb.ru/api/posts?sort=asc&order=ASC&page=1",
					"protocol": "https",
					"host": [
						"test-stand",
						"gb",
						"ru"
					],
					"path": [
						"api",
						"posts"
					],
					"query": [
						{
							"key": "sort",
							"value": "asc"
						},
						{
							"key": "order",
							"value": "ASC"
						},
						{
							"key": "page",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	]
}